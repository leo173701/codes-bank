

$$

239. Sliding Window Maximum
这道题给定了一个数组，还给了一个窗口大小k，让我们每次向右滑动一个数字，每次返回窗口内的数字的最大值，而且要求我们代码的时间复杂度为O(n)。
提示我们要用双向队列deque来解题，并提示我们窗口中只留下有用的值，没用的全移除掉。
果然Hard的题目我就是不会做，网上看到了别人的解法才明白，解法又巧妙有简洁，膜拜啊。

大概思路是用双向队列保存数字的下标，遍历整个数组，如果此时队列的首元素是i - k的话，表示此时窗口向右移了一步，则移除队首元素。
然后比较队尾元素和将要进来的值，如果小的话就都移除，然后此时我们把队首元素加入结果中即可，
参见代码如下：


class Solution(object):    
  def maxSlidingWindow(self, nums, k):
  """        :
  type nums: 
  List[int]        :type k: int
  :rtype: List[int]        
  """        
     from collections import deque
     res = []
     q = deque()
     for idx, v in enumerate(nums):
         if len(q) > 0 and q[0] <= idx - k:
            t = q.popleft()            
         while len(q) > 0 and nums[q[-1]] < v:
            q.pop()
         q.append(idx)            
         if idx >= k - 1:
            res.append(nums[q[0]])
     return res

